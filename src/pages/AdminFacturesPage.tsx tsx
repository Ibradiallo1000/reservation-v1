import React, { useEffect, useState } from "react";
import { collection, getDocs, doc, updateDoc } from "firebase/firestore";
import { db } from "../firebaseConfig";

interface Facture {
  id: string;
  companyId: string;
  companyName: string;
  plan: string;
  montant: number;
  dateDebut: Date;
  dateFin: Date;
  statut: "payé" | "en_attente" | "expiré";
}

const AdminFacturesPage: React.FC = () => {
  const [factures, setFactures] = useState<Facture[]>([]);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState("");

  useEffect(() => {
    const fetchFactures = async () => {
      try {
        const snapshot = await getDocs(collection(db, "factures"));
        const data = snapshot.docs.map((docSnap) => {
          const d = docSnap.data();
          return {
            id: docSnap.id,
            companyId: d.companyId,
            companyName: d.companyName || "Inconnue",
            plan: d.plan || "Free",
            montant: d.montant || 0,
            dateDebut: d.dateDebut?.toDate() || new Date(),
            dateFin: d.dateFin?.toDate() || new Date(),
            statut: d.statut || "en_attente",
          } as Facture;
        });
        setFactures(data);
      } catch (err) {
        console.error("Erreur chargement factures:", err);
        setMessage("Erreur lors du chargement des factures");
      } finally {
        setLoading(false);
      }
    };
    fetchFactures();
  }, []);

  const handleUpdateStatut = async (factureId: string, newStatut: Facture["statut"]) => {
    try {
      await updateDoc(doc(db, "factures", factureId), { statut: newStatut });
      setFactures((prev) =>
        prev.map((f) => (f.id === factureId ? { ...f, statut: newStatut } : f))
      );
      setMessage(`✅ Facture mise à jour en "${newStatut}"`);
    } catch (err) {
      console.error("Erreur maj statut facture:", err);
      setMessage("Erreur lors de la mise à jour du statut");
    }
  };

  if (loading) return <p className="p-6">Chargement des factures...</p>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Gestion des Factures</h1>
      {message && <p className="mb-4 text-blue-600">{message}</p>}

      {factures.length === 0 ? (
        <p className="text-gray-500 italic">Aucune facture trouvée</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {factures.map((f) => (
            <div key={f.id} className="bg-white border rounded-lg shadow-sm p-4">
              <h2 className="text-lg font-semibold text-orange-600 mb-1">{f.companyName}</h2>
              <p className="text-sm text-gray-600">Plan : {f.plan}</p>
              <p className="text-sm text-gray-600">
                Période : {f.dateDebut.toLocaleDateString()} - {f.dateFin.toLocaleDateString()}
              </p>
              <p className="text-sm text-gray-600">
                Montant : <span className="font-bold">{f.montant.toLocaleString()} FCFA</span>
              </p>
              <p
                className={`text-sm mt-1 ${
                  f.statut === "payé"
                    ? "text-green-600"
                    : f.statut === "en_attente"
                    ? "text-yellow-600"
                    : "text-red-600"
                }`}
              >
                Statut : {f.statut}
              </p>

              <div className="flex gap-2 mt-3">
                <button
                  onClick={() => handleUpdateStatut(f.id, "payé")}
                  className="text-sm px-3 py-1 rounded bg-green-600 text-white hover:bg-green-700"
                >
                  Valider Paiement
                </button>
                <button
                  onClick={() => handleUpdateStatut(f.id, "en_attente")}
                  className="text-sm px-3 py-1 rounded bg-yellow-500 text-white hover:bg-yellow-600"
                >
                  Relancer
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default AdminFacturesPage;
